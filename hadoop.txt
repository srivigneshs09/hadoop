sudo apt-get install git

sudo apt install openjdk-8-jdk

cd /usr/lib/jvm/

ls

sudo nano .bashrc(paste the below commands)
	(export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 
	export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin 
	export HADOOP_HOME=~/hadoop-3.2.3/ 
	export PATH=$PATH:$HADOOP_HOME/bin 
	export PATH=$PATH:$HADOOP_HOME/sbin 
	export HADOOP_MAPRED_HOME=$HADOOP_HOME 
	export YARN_HOME=$HADOOP_HOME 
	export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop 
	export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native 
	export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib/native" 
	export HADOOP_STREAMING=	$HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-3.2.3.jar
	export HADOOP_LOG_DIR=$HADOOP_HOME/logs 
	export PDSH_RCMD_TYPE=ssh)

sudo apt-get install ssh

tar -zxvf ~/Downloads/hadoop-3.2.3.tar.gz (download the Hadoop file from apache hadoop)

cd hadoop

cd etc/hadoop/

ls

sudo nano hadoop-env.sh(in java home change the value to the above java home)

sudo nano core-site.xml
(<configuration> 
 <property> 
 <name>fs.defaultFS</name> 
 <value>hdfs://localhost:9000</value>  </property> 
 <property> 
<name>hadoop.proxyuser.dataflair.groups</name> <value>*</value> 
 </property> 
 <property> 
<name>hadoop.proxyuser.dataflair.hosts</name> <value>*</value> 
 </property> 
 <property> 
<name>hadoop.proxyuser.server.hosts</name> <value>*</value> 
 </property> 
 <property> 
<name>hadoop.proxyuser.server.groups</name> <value>*</value> 
 </property> 
</configuration>)

sudo nano hdfs-site.xml
(<configuration> 
 <property> 
 <name>dfs.replication</name> 
 <value>1</value> 
 </property> 
</configuration>)

sudo nano mapred-site.xml
(<configuration> 
 <property> 
 <name>mapreduce.framework.name</name>  <value>yarn</value> 
 </property> 
 <property>
 <name>mapreduce.application.classpath</name> 
  
<value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*</value> 
 </property> 
</configuration>)

sudo nano yarn-site.xml
(<configuration> 
 <property> 
 <name>yarn.nodemanager.aux-services</name> 
 <value>mapreduce_shuffle</value> 
 </property> 
 <property> 
 <name>yarn.nodemanager.env-whitelist</name> 
  
<value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREP END_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value> 
 </property> 
</configuration>)

ssh localhost

ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa 
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys 
chmod 0600 ~/.ssh/authorized_keys 
hadoop-3.2.3/bin/hdfs namenode -format

export PDSH_RCMD_TYPE=ssh

start-all.sh

localhost:9870(in website)

hadoop fs -mkdir /user

hadoop fs -mkdir /user/sri


To run wordcount:

Hadoop version

javac -version

1.create a new folder input_data and inside that add your own text file named input_txt(add names into it)
2.create a new folder to hold the java class files named tutorial_classes
3.set Hadoop classpath environment variable
export HADOOP_CLASSPATH=$(Hadoop classpath)
echo $HADOOP_CLASSPATH

Hadoop fs -mkdir /wordcounttutorial
Hadoop fs -mkdir /wordcounttutorial/input
Hadoop fs -put <inputfile> /wordcounttutorial/input
cd <tutorialdirectory>

javac -classpath ${HADOOP_CLASSPATH} -d <classes_folder> <Tutorial_java_file>

jar -cvf firstTutorial.jar -C <classes_folder>

Hadoop jar <jarfile> <class_name> <hdfs_input_directory> <hdfs_output_directory>

Hadoop dfs -cat <hdfs_output_directory>






